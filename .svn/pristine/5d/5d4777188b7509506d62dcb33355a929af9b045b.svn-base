/*
-----------------------------------------------------------------------------------------------------------------------------------
HIS – Health Information System - RESTful  API
-----------------------------------------------------------------------------------------------------------------------------------
This is a free and open source API which can be used to develop and distributed in the hope that it will be useful to develop EMR systems.
You can utilize the services provides by the API to speed up the development process. 
You can modify the API to cater your requirements at your own risk. 
 
-----------------------------------------------------------------------------------------------------------------------------------
Authors: H.L.M.M De Silva, K.V.M Jayadewa, G.A.R Perera, S.I Kodithuwakku
Supevisor: Dr. Koliya Pulasinghe | Dean /Faculty of Graduate Studies |SLIIT
Co-Supervisor: Mr.Indraka Udayakumara | Senior Lecturer | SLIIT
URL: https://sites.google.com/a/my.sliit.lk/his
----------------------------------------------------------------------------------------------------------------------------------
*/
package lib.driver.opd.driver_class;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;




import lib.SessionFactoryUtil;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import core.classes.api.user.User;
import core.classes.laboratory.TestDescription;
import core.classes.opd.*;

/**
 * @author Prabhath
 * 
 */
public class OpdLabOrderDBDriver {

	Session session = SessionFactoryUtil.getSessionFactory().getCurrentSession();
	 
	
	public boolean saveOpdLaborder(OpdLabOrder opdLab,int testID,int visitID,int userID){
		Transaction tx=null;
		try {
			tx=session.beginTransaction();
			TestDescription test=(TestDescription) session.get(TestDescription.class, testID);
			Visit visit=(Visit) session.get(Visit.class, visitID);
			User user=(User) session.get(User.class, userID);
			opdLab.setVisit(visit);
			opdLab.setOrderTestID(test);
			opdLab.setOrderCreateUser(user);
			opdLab.setOrderLastUpdateUser(user);
			
			
			session.save(opdLab);
			tx.commit();
			//System.out.println("IN DBDriver");
			return true;
		} catch (RuntimeException ex) {
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
				} catch (HibernateException he) {
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return false;
		}	
		
	}
	
	
	public List<OpdLabOrder> retrieveLabOrderByUserID(int userID){
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			User user = (User) session.get(User.class, userID);
			Query query = session.createQuery("from OpdLabOrder where visit.visitCreateUser=:user");
			query.setParameter("user", user);
			
			List<OpdLabOrder> list=castList(OpdLabOrder.class, query.list());
			tx.commit();
			return list;
		} catch (RuntimeException ex) {
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
				} catch (HibernateException he) {
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return null;
		}
		
	}
	
	

	public List<OpdLabOrder> retrieveLabOrderByPatientID(int patientID){
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			OutPatient patient = (OutPatient) session.get(OutPatient.class, patientID);
			Query query = session.createQuery("from OpdLabOrder where visit.patient=:p");
			query.setParameter("p", patient);
			
			List<OpdLabOrder> list=castList(OpdLabOrder.class, query.list());
			tx.commit();
			return list;
		} catch (RuntimeException ex) {
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
				} catch (HibernateException he) {
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return null;
		}
		
	}
	
	
	
	public List<OpdLabOrder> retrieveLabOrderByVisitID(int visitID){
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			Visit visit = (Visit) session.get(Visit.class, visitID);
			Query query = session.createQuery("from OpdLabOrder where visit=:v");
			query.setParameter("v", visit);
			
			List<OpdLabOrder> list=castList(OpdLabOrder.class, query.list());
			tx.commit();
			return list;
		} catch (RuntimeException ex) {
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
				} catch (HibernateException he) {
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return null;
		}
		
	}
	
	
	public static <T> List<T> castList(Class<? extends T> clazz, Collection<?> c) {
	    List<T> r = new ArrayList<T>(c.size());
	    for(Object o: c)
	      r.add(clazz.cast(o));
	    return r;
	}




}
