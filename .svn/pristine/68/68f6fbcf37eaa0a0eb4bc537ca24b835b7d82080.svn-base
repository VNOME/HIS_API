/*
-----------------------------------------------------------------------------------------------------------------------------------
HIS – Health Information System - RESTful  API
-----------------------------------------------------------------------------------------------------------------------------------
This is a free and open source API which can be used to develop and distributed in the hope that it will be useful to develop EMR systems.
You can utilize the services provides by the API to speed up the development process. 
You can modify the API to cater your requirements at your own risk. 
 
-----------------------------------------------------------------------------------------------------------------------------------
Authors: H.L.M.M De Silva, K.V.M Jayadewa, G.A.R Perera, S.I Kodithuwakku
Supevisor: Dr. Koliya Pulasinghe | Dean /Faculty of Graduate Studies |SLIIT
Co-Supervisor: Mr.Indraka Udayakumara | Senior Lecturer | SLIIT
URL: https://sites.google.com/a/my.sliit.lk/his
----------------------------------------------------------------------------------------------------------------------------------
*/
package lib.driver.api.driver_class.standards.hin;

import lib.SessionFactoryUtil;

import org.hibernate.Session;

import core.classes.api.standards.hin.Hin;

import java.util.Iterator;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Transaction;

/**
 *  HinDBDriver class contains all the CRUD operation methods that required by GenerateHin class
 */

public class HinDBDriver {
	
	
	Session session = SessionFactoryUtil.getSessionFactory().openSession();

	
	/***
	 * Get the last Hin object from the Database
	 * @return an Hin type object.
	 * 
	 */
	public Hin getLastHin()
	{
		Transaction tx = null;
		try{
			tx = session.beginTransaction();
			Query query =  session.createQuery("select h from Hin as h order by hHinId asc  limit 1");
			List<Hin> hinList  = query.list();
			Hin hin=new Hin();
			for(Iterator<Hin> iter = hinList.iterator(); iter.hasNext();)
			{
				hin = (Hin)iter.next();
			}
			tx.commit();
			return hin;
		}catch(RuntimeException ex){
			if(tx != null && tx.isActive())
			{
				try{
					tx.rollback();
				}catch(HibernateException he){
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return null;
		}
		
			
	}
	
	
	
	
	
	/***
	 * Insert new HIN details to the Database
	 * @param hinObj is a Hin type object that contains data about Hin
	 * @return a boolean value. Returns true if new data inserted successfully else returns false
	 * 
	 */
	public boolean inserHinDetails(Hin hinObj){
		Transaction tx = null;
		try{	
			tx = session.beginTransaction();
			session.save(hinObj);
			tx.commit();
			return true;
		}catch(RuntimeException ex){
			if(tx != null && tx.isActive())
			{
				try{
					tx.rollback();
				}catch(HibernateException he){
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return false;
		}
	}
	
	
	
	
	/***
	 * Insert updated Hin data into the database.
	 * @param hinObj is a Hin type object that contains data about updating hin data
	 * @return a boolean value. Returns true if hin details updated Successfully else returns false
	 */
	
	public boolean updateHinDetails(Hin hinObj){
		Transaction tx=null;
		
		try{
			tx=session.beginTransaction();
			session.update(hinObj);
			tx.commit();
			return true;
		}
		
		catch (RuntimeException ex) {
			if(tx != null && tx.isActive()){
				try{
					tx.rollback();
				}catch(HibernateException he){
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return false;
		}
		
	}
	
	
	
	
	/**
	 * Delete hin data from the database 
	 * @param hinObj is a User type object that it to be deleted
	 * @return a boolean value. Returns true if deleted Successfully else returns false
	 */
	
	public boolean deleteHinDetails(Hin hinObj){
		Transaction tx=null;
		
		try {
			
			tx=session.beginTransaction();
			session.delete(hinObj);
			tx.commit();
			return true;
			
		} 
		
		catch (RuntimeException ex) {
			if(tx != null && tx.isActive()){
				try{
					tx.rollback();
				}catch(HibernateException he){
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return false;
		}
		
	}
	
	

	
	/***
	 * Insert updated data of a particular immrStatistics into the database.
	 * @param immrStatisticsObj is a ImmrStatistics type object that contains data about updating record
	 * @return a boolean value. Returns true if code details updated Successfully else returns false
	 */
	
	public boolean updateSerialNumber(Hin hinObject){
		Transaction tx=null;
		
		try{
			tx=session.beginTransaction();
			session.update(hinObject);
			tx.commit();
			return true;
		}
		
		catch (RuntimeException ex) {
			if(tx != null && tx.isActive()){
				try{
					tx.rollback();
				}catch(HibernateException he){
					System.err.println("Error rolling back transaction");
				}
				throw ex;
			}
			return false;
		}
		
	}
	
	
	

}
