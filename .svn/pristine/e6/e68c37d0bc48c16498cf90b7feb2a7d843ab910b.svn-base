/*
-----------------------------------------------------------------------------------------------------------------------------------
HIS – Health Information System - RESTful  API
-----------------------------------------------------------------------------------------------------------------------------------
This is a free and open source API which can be used to develop and distributed in the hope that it will be useful to develop EMR systems.
You can utilize the services provides by the API to speed up the development process. 
You can modify the API to cater your requirements at your own risk. 
 
-----------------------------------------------------------------------------------------------------------------------------------
Authors: H.L.M.M De Silva, K.V.M Jayadewa, G.A.R Perera, S.I Kodithuwakku
Supevisor: Dr. Koliya Pulasinghe | Dean /Faculty of Graduate Studies |SLIIT
Co-Supervisor: Mr.Indraka Udayakumara | Senior Lecturer | SLIIT
URL: https://sites.google.com/a/my.sliit.lk/his
----------------------------------------------------------------------------------------------------------------------------------
*/
package core.classes.api.standards.hin;

import java.util.Date;

import lib.driver.api.driver_class.standards.hin.*;

/**
 * 
 * This class implements the HIN (Health Identification Number)
 * HIN is consists of three parts, PCI (Point of Code Issue) Number, Serial Number and Check Digit
 * PCI is given by government, Serial Number is getting increment one by one and 
 * Check Digit is generated by a predefined algorithm
 * 
 *  @author IMANKA
 * 	version 1.0
 */

public class GenerateHin {

	
	static HinDBDriver hinDBDriver=new HinDBDriver();
	static Hin lastHinObject=hinDBDriver.getLastHin();
	
	/*variable declaration of lastSerialNumber and currentPci*/
	static int lastHinId=lastHinObject.gethHinId();
	static Date lastHinDate=lastHinObject.gethDate();
	static String lastSerialNumber=lastHinObject.gethLastSerialNumber();
	static String currentPci=lastHinObject.gethPCI();
	
	
	
	
	/*
	 * The method getCurrentSerialNumber() returns the New Serial Number
	 * Get the last Serial Number and based on that this will generate the next Serial Number
	 * 
	*/
	public static String getCurrentSerialNumber(){
		
		String newSerial;
		String lastSerial=lastHinObject.gethLastSerialNumber();

		try{
		if(lastSerial==null)
		{
			newSerial="000000";
			//This is null
		}
		else if(Integer.parseInt(lastSerial)>=999999)
		{
			newSerial=null;
		}
		else{
			int lastSerialNum=(Integer.parseInt(lastSerial));
			
			if (lastSerialNum==000000)
			{
				newSerial="000001";
			}
			else if ((lastSerialNum%100000)==99999 || (lastSerialNum/100000)!=0)
			{
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial =String.valueOf(intCurrentSerialNumber);
			}
			else if ((lastSerialNum%10000)==9999 || (lastSerialNum/10000)!=0)
			{		
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial ="0"+String.valueOf(intCurrentSerialNumber);
			}
			else if ((lastSerialNum%1000)==999 || (lastSerialNum/1000)!=0)
			{
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial ="00"+String.valueOf(intCurrentSerialNumber);
			}
			else if ((lastSerialNum%100)==99 || (lastSerialNum/100)!=0)
			{
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial ="000"+String.valueOf(intCurrentSerialNumber);
			}
			else if ((lastSerialNum%10)==9 || (lastSerialNum/10)!=0 )
			{
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial ="0000"+String.valueOf(intCurrentSerialNumber);
			}
			else 
			{
				int intCurrentSerialNumber= (Integer.parseInt(lastHinObject.gethLastSerialNumber()))+1;
				newSerial ="00000"+String.valueOf(intCurrentSerialNumber);
			}
		}
		
		return newSerial;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return e.getMessage();
		}
	
	}
	
	
	
	/***
	 * The method getCurrentPci() returns the current PCI 
	 * 
	*/
	public static String getCurrentPci()
	{
		return currentPci;
	}
	
	
	
	/*The method geCurrentId() returns Current ID*/
	public static int geCurrentId()
	{
		int hinId=lastHinObject.gethHinId();
		return hinId;
	}
	
	
	
	
	/***
	 * This method generates the complete HIN
	 * Takes pci and serial number as inputs
	 * */
	
		public  static String getcompleteHin()
		{
	 		
	 		String serialNumber=getCurrentSerialNumber();
	 		String PciValue =currentPci;		
	 		String idWithoutCd=PciValue+serialNumber;
	 		
	 		try{
	 		String checkDigit= String.valueOf(checkDigit(idWithoutCd)); 
	 		String completeHin=idWithoutCd+checkDigit;
		
	 		Hin hinObj=lastHinObject;
	 		hinObj.sethLastSerialNumber(serialNumber);
	 		hinObj.sethDate(new Date());
	 		updateHinSerialNumber(hinObj);
	 		
	 		return completeHin;
	 		}
	 		catch(InvalidIdentifierException e)
	 		{
	 			e.printStackTrace();
				return "Failed to Generate";
	 		}
	 		
		}
	
	
	
	
	
	/*
	 * This method generates the check digit. 
	 * Takes Id without check digit as the input
	 * 
	 * */
	public static int checkDigit(String idWithoutCheckdigit) throws InvalidIdentifierException {
		
	 
		// allowable characters within identifier
		String validChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVYWXZ_";
		 
		// remove leading or trailing whitespace, convert to upperCase
		idWithoutCheckdigit = idWithoutCheckdigit.trim().toUpperCase();
		 
		// this will be a running total
		int sum = 0;
		 
		// loop through digits from right to left
		for (int i = 0; i < idWithoutCheckdigit.length(); i++) {
		 
		//set ch to "current" character to be processed
		char ch = idWithoutCheckdigit
		.charAt(idWithoutCheckdigit.length() - i - 1);
		 
		// throw exception for invalid characters
		if (validChars.indexOf(ch) == -1)
			throw new InvalidIdentifierException("\"" + ch + "\" is an invalid character");
		 
		// our "digit" is calculated using ASCII value - 48
		int digit = (int)ch - 48;
		 
		// weight will be the current digit's contribution to
		// the running total
		int weight;
		if (i % 2 == 0) {
		 
		      // for alternating digits starting with the rightmost, we
		      // use our formula this is the same as multiplying x 2 and
		      // adding digits together for values 0 to 9.  Using the
		      // following formula allows us to gracefully calculate a
		      // weight for non-numeric "digits" as well (from their
		      // ASCII value - 48).
		      weight = (2 * digit) - (int) (digit / 5) * 9;
		 
		    } else {
		 
		      // even-positioned digits just contribute their ascii
		      // value minus 48
		      weight = digit;
		 
		    }
		 
		// keep a running total of weights
		sum += weight;
		 
		}
		 
		// avoid sum less than 10 (if characters below "0" allowed,
		// this could happen)
		sum = Math.abs(sum) + 10;
		 
		// check digit is amount needed to reach next number
		// divisible by ten
		return (10 - (sum % 10)) % 10;
		 
	}
	
	
	
	
	/*
	 * The method updateHinSerialNumber will update the existing Serial Number in the database
	 * The input parameter hinSeObj is Hin type object, and this holds new serial number and updated date
	 */
	public static String updateHinSerialNumber(Hin hinSeObj) {

		String result = "false";
		boolean r = false;
		Hin hinObj = hinSeObj;

		try {
			
			r=hinDBDriver.updateSerialNumber(hinObj);
			result = String.valueOf(r);
			return result;

		} catch (Exception ex) {
			ex.printStackTrace();
			return ex.getMessage();
		}

	}
	
	
	
	

	public static void main(String[] args) throws InvalidIdentifierException {

		
	String hin=	getcompleteHin();
	System.out.println(hin);
	
	//updateSrialNumber(lastHinId, lastHinDate, currentPci, getCurrentSerialNumber());
	//String rr=updateSerialNumber();
	//System.out.println(rr);
		
	//String pci=getCurrentPci();
	//System.out.println(pci);

		
	}
	
	
	
	


	

}
